---
name: Tech Tests

# Controls when the workflow will run
on: [pull_request]
permissions: read-all
jobs:
  iac_checks:
    runs-on: ubuntu-latest
  # Add "id-token" with the intended permissions.
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      security-events: write
      actions: read

    steps:
    - uses: 'actions/checkout@v3'
    - uses: hadolint/hadolint-action@v3.1.0
      with:
        recursive: true
        verbose: true
    - name: Update Pull Request with hadolint
      uses: actions/github-script@v7.0.1
      if: github.event_name == 'pull_request'
      with:
        script: |
          const output = `
          #### Hadolint: \`${{ steps.hadolint.outcome }}\`
          \`\`\`
          ${process.env.HADOLINT_RESULTS}
          \`\`\`
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_NAME }}
        service_account: ${{ secrets.GCP_WORKLOAD_IDENTITY_SA_EMAIL }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - uses: 'docker/login-action@v2'
      with:
        registry: 'eu.gcr.io'
        username: 'oauth2accesstoken'
        password: '${{ steps.auth.outputs.access_token }}'

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: false

    - name: Terraform Init
      id: init
      run: terraform init -backend-config=env/backend.tfvars

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color -compact-warnings | grep -v '^`'

    - name: Checkov GitHub Action
      uses: bridgecrewio/checkov-action@v12
      with:
         # This will add both a CLI output to the console and create a results.sarif file
        output_format: cli,sarif
        output_file_path: console,results.sarif
        config_file: .checkov.yaml
        skip_path: gha-creds-*json

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -var-file env/project.tfvars | grep -v '^`'
      continue-on-error: false

    - uses: actions/github-script@v7.0.1
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
    - name: Fix permissions workaround
      run: sudo chown -R $USER:$USER $GITHUB_WORKSPACE
    - name: Setup Infracost
      uses: infracost/actions/setup@v2.1.0
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
    - name: Checkout base branch
      uses: actions/checkout@v3
      with:
        ref: '${{ github.event.pull_request.base.ref }}'
    - name: Generate Infracost cost estimate baseline
      run: |
        infracost breakdown --path="." \
                            --format=json \
                            --usage-file infracost-usage.yml \
                            --out-file=/tmp/infracost-base.json
    - name: Checkout PR branch
      uses: actions/checkout@v3
    - name: Generate Infracost diff
      run: |
        infracost diff --path="." \
                        --format=json \
                        --compare-to=/tmp/infracost-base.json \
                        --out-file=/tmp/infracost.json
    - name: Post Infracost comment
      run: |
          infracost comment github --path=/tmp/infracost.json \
                                   --repo=$GITHUB_REPOSITORY \
                                   --github-token=${{secrets.GITHUB_TOKEN}} \
                                   --pull-request=${{github.event.pull_request.number}} \
                                   --behavior=update

